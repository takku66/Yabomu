# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    # DB接続を行うため
    services: 
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Adding secret
      run: |
          echo $DB_URL >> ./src/main/resources/application-sec.properties
          echo $DB_USER >> ./src/main/resources/application-sec.properties
          echo $DB_PASS >> ./src/main/resources/application-sec.properties
          echo $OAUTH_CL_ID >> ./src/main/resources/application-sec.properties
          echo $OAUTH_CL_SEC >> ./src/main/resources/application-sec.properties
          echo $OAUTH_SCOPE >> ./src/main/resources/application-sec.properties
          echo $OAUTH_PROVIDER >> ./src/main/resources/application-sec.properties
          cat ./src/main/resources/application.properties
      shell: bash
      env:
        DB_URL: ${{ secrets.DATASOURCE_URL }}
        DB_USER: ${{ secrets.DATASOURCE_USER_NAME }}
        DB_PASS: ${{ secrets.DATASOURCE_PASSWORD }}
        OAUTH_CL_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CL_SEC: ${{ secrets.OAUTH_CLIENT_SECRET }}
        OAUTH_SCOPE: ${{ secrets.OAUTH_SCOPE }}
        OAUTH_PROVIDER: ${{ secrets.OAUTH_PROVIDER_URI }}
    - name: Build with Maven
      run: mvn -B -e -X package --file pom.xml
